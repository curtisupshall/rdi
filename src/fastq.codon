from bio import *
from python import tqdm

@tuple
class Read:
    position: int
    record: FASTQRecord

class ReadCollection:
    text: str
    text_length: int
    reads: List[Read]

    def __init__(self: ReadCollection, file_path: str):
        self.text = ''
        self.text_length = 0
        self.reads = List[Read]([])
        
        self._build_collection(file_path)
    
    def _build_collection(self: ReadCollection, file_path: str):
        print("Reading file...")
        records: List[FASTQRecord] = [record for record in FASTQ(file_path)]

        progress = tqdm.tqdm(total=len(records), smoothing=0)

        for record in records:
            progress.update(1)
            self.add_read(record)

        progress.close()        
        print(f'Building text for {str(len(self.reads))} reads...')
        seqs = [str(read.record.seq).upper() for read in self.reads]
        self.text = '_'.join(seqs)

    def add_read(self, read: FASTQRecord):
        start_position = self.text_length
        # self.text += f'{str(read.seq).upper()}_'
        self.text_length += len(read.seq) + 1
        self.reads.append((start_position, read))
        return
    
    def report_kmer(self, k: int, ps: List[int]):
        # Iterate over all positions for a given kmer of length k
        for p in ps:
            # Perform a binary search on the read data

            low = 0
            high = len(self.reads) - 1

            while low <= high:
                mid = (low + high) // 2 # integer division
                pivot = self.reads[mid]

                if p >= pivot.position:
                    if p + k <= pivot.position + len(pivot.record.seq):
                        print(self.text[p:p+k])
                        print(pivot.record.seq)
                        break
                    else:
                        low = mid + 1
                else:
                    high = mid - 1
    
    def report_anchor(self, p: int, l: int, r: int):
        pass
