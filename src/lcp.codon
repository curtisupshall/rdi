from archive import RdiArchive
from typing import Optional

LCP_RDI_EXT = '.lcp.rdi'

# Builds an LCP array.
# TODO add tqdm to this method
def _build_lcp_array(Text: str, n, suffix_array: List[Int[32]]) -> List[int]:
    print("Building LCP array...")

    lcp = List[int]([0] * (n))
    rank = List[int]([0] * n)
    k = 0

    for i in range(n):
        rank[int(suffix_array[i])] = i

    # Kasai Algorithm
    for i in range(n):
        if rank[i] == n - 1:
            k = 0
            continue
        j = int(suffix_array[rank[i] + 1])
        while i + k < n and j + k < n and Text[i + k] == Text[j + k]:
            k += 1
        lcp[rank[i]] = k
        if k > 0:
            k -= 1

    return [0] + [0] + lcp + [0]

# Loads an LCP array from disk
def _load_lcp_array(file_path) -> List[int]:
    archive = RdiArchive[List[int]]()
    return archive.load(file_path, LCP_RDI_EXT)

# Writes an LCP array to disk
def _write_lcp_array(LCP, file_path):
    print('Saving LCP array to disk...')
    archive = RdiArchive[List[int]]()
    archive.write(LCP, file_path, LCP_RDI_EXT)

# Attempts to read an LCP array from disk, and generates one if
# loading the LCP array fails. The LCP is then written to disk.
def build_lcp_array(Text: str, n: int, SA: List[Int[32]], file_path: Optional[str]):
    if file_path is not None:
        try:
            # Check if LCP array is already generated.
            LCP = _load_lcp_array(file_path)
            print("[debug] Loaded LCP from file successfully")
            return LCP

        except:
            # Cannot read LCP array from disk. Build the LCP array.
            print("[debug] Failed to load LCP array.")
    
    LCP = _build_lcp_array(Text, n, SA)

    if file_path is not None:
        # Save the LCP array to disk
        _write_lcp_array(LCP, file_path)

    return LCP
