# Seq imports
from bio import *

# Codon standard library imports
import sys
from threading import Lock
import openmp as omp
import datetime

# Python imports
from python import os, pickle, argparse, bz2, tqdm

# RDI imports
from sa import load_or_build_suffix_array
from lcp import load_or_build_lcp_array
from archive import RdiArchive


INDEX_RDI_EXT = '.idx.rdi'

def write_index(index, file_path):
    print(f'Writing index to disk... ')
    archive = RdiArchive[Dict[int, Dict[int, List[int]]]]()
    archive.write(index, file_path, INDEX_RDI_EXT)

def load_index(file_path):
    print(f'Loading index from disk... ')
    archive = RdiArchive[Dict[int, Dict[int, List[int]]]]()
    return archive.load(file_path, INDEX_RDI_EXT)

def _generate_index(Text: str, n: int, SA, LCP):
    print("Building RDI dictionary.")

    dictionary = Dict[int, Dict[int, List[int]]]()
    progress = tqdm.tqdm(total=n, smoothing=0, colour='#1ED18B')

    # @omp.critical
    def report(p: int, l: int, r: int):
        if l not in dictionary:
            dictionary[l] = dict()
        
        if r not in dictionary[l]:
            dictionary[l][r] = list()
        
        dictionary[l][r].append(p)

    # @omp.critical
    def increment_progress():
        progress.update(1)

    # @par(schedule='dynamic', chunk_size=65000, num_threads=32, ordered=False)
    for i in range(1, n + 1):
        increment_progress()
        if (LCP[i] < LCP[i + 1]):
            for k in range(LCP[i] + 1, LCP[i + 1] + 1):            
                # Calculate j > i is the minimum value such that LCP[j] < LCP[i + 1]
                j_min = -1

                for j in range(i + 1, n + 2):
                    if (LCP[j] < k):
                        j_min = j
                        break

                if j <= i:
                    continue

                p: int = int(SA[i])      # Position in the text
                l: int = k               # Length of the string
                r: int = j_min - i       # Number of occurrences

                report(p, l, r)

    progress.close()
    return dictionary

def create_index(Text: str, file_path: str):
    n = len(Text)
    SA = load_or_build_suffix_array(Text, n, file_path)
    LCP = load_or_build_lcp_array(Text, n, SA, file_path)

    dictionary = _generate_index(Text, n, SA, LCP)

    write_index(dictionary, file_path)
    return

def _show_table(Text, n, SA, LCP):
    print('---- Table 1 ----\n')
    print('i \tSA[i]\tLCP[i]\tT[SA[i]..n]')
    print
    for i in range(n + 1):
        sa_index = int(SA[i])
        print(f'{i}\t{sa_index}\t{LCP[i]}\t{Text[sa_index:n]}$')


