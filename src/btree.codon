from python import json

class TreeNode[T]:
    key: int
    value: T
    left: Optional[TreeNode[T]] = None
    right: Optional[TreeNode[T]] = None

    def __init__(self, key: int, value: T):
        self.key = key
        self.value = value
        self.left = None
        self.right = None

    def __repr__(self):
        return f'<{self.key}, {self.value}, {self.left}, {self.right}>'
    
    def child(self, key, value):
        if key < self.key:
            if self.left is None:
                self.left = TreeNode[T](key, value)
            else:
                self.left.child(key, value)
        else:
            if self.right is None:
                self.right = TreeNode[T](key, value)
            else:
                self.right.child(key, value)
    
    def find(self, key) -> Optional[T]:
        if self.key == key:
            return self.value
        elif key < self.key and self.left is not None:
            return self.left.find(key)
        elif self.right is not None:
            return self.right.find(key)
        
        return None

    @staticmethod
    def deserialize(body):
        return
    
class Btree[T]:
    root: Optional[TreeNode[T]] = None

    def __init__(self):
        self.root = None
    
    def __init__(self, key: int, value: T):
        self.root = TreeNode[T](key, value)

    def __repr__(self):
        return None if self.root is None else str(self.root)
    
    def insert(self, key: int, value: T):
        if self.root is None:
            self.root = TreeNode(key, value)
        else:
            self.root.child(key, value)

    def find(self, key: int) -> Optional[T]:
        return None if self.root is None else self.root.find(key)

    
# Rdi: Btree[Btree[List[int]]] = Btree()

# tree: Btree[List[int]] = Btree()
# tree.insert(1, List[int]([69]))

# Rdi.insert(100, tree)

# # print(Rdi)

# x = Rdi.find(100)
# y = x.find(1)
# print(x)
# print(y)
# y.append(70)

# print(Rdi)